#!/bin/sh
#
# This script is the facade to a number of commands which might be helpful to
# manage the project, mainly in the development environment. 
#
# When adding new sub-commands try to keep this file lean, place the actual
# script in the scope where it belongs and call it from here, i.e. into the
# app/api/bin or app/client/bin etc.
CYAN='\033[0;36m'
RED='\033[0;31m'
GREEN='\033[0;32m'
NC='\033[0m' # No Color
BOLD=$(tput bold)
NORM=$(tput sgr0)

# Help function
Help()
{
   # Display Help
   printf "\nManage your application with the following commands\n\n"
   printf "Syntax:\tadmin [-h] [sub-command] [argument...]\n\n"
   printf "\toptions:\n\n"
   printf -- "\t\t${CYAN}-h${NC}\t\tPrint this Help.\n\n"
   printf "\tsub-commands:\n\n"
   printf "\t\t${CYAN}install dev${NC}\tConfigure project specific git settings\n\n"
   printf "\t\t${CYAN}log [name]${NC}\tPrint container logs to stdout, defaults to ifc-dev-api.
                                Instead of full container name or ID the two shortcuts 'client'
                                and 'api' are understood. \n\n"
}

# get options and act accordingly
while getopts ":h" option; do
   case $option in
      h) # display Help
         Help
         exit;;
   esac
done

# Install local development environment
[ "$1" = "install" -a "$2" = "dev" ] && {
  printf "${CYAN}Configure development set-up (currently only git)...\n${NORM}"
  ./bin/install-dev
  exit
}

# Print logs to stdout 
# defaults to api-dev-api 
# understand abbreviation, e.g.
# ./admin log api  => ./admin log ifc-dev-api
# ./admin log client => ./admin log ifc-client
[ "$1" = "log" ] && {
  printf "${CYAN}Requese API loggin to stdout\n${NORM}"
  ./bin/log $2
  exit
}

# if nothing was called, display help
Help
